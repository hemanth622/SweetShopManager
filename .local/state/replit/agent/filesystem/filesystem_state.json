{"file_contents":{"design_guidelines.md":{"content":"# Sweet Shop Management System Design Guidelines\n\n## Design Approach\n**System-Based Approach**: Using Material Design principles for this data-rich application with forms, inventory management, and administrative functions. The focus is on clarity, efficiency, and professional appearance suitable for both customers and admin users.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Light Mode: Primary (219 69% 56%), Surface (0 0% 98%)\n- Dark Mode: Primary (219 69% 65%), Surface (222 47% 11%)\n\n**Supporting Colors:**\n- Success: 142 76% 36% (for purchase confirmations)\n- Warning: 38 92% 50% (for low stock alerts)\n- Error: 0 84% 60% (for out-of-stock items)\n\n### Typography\n**Font System**: Roboto from Google Fonts\n- Headlines: Roboto Medium (24px, 20px, 18px)\n- Body: Roboto Regular (16px, 14px)\n- Captions: Roboto Regular (12px)\n\n### Layout System\n**Spacing Units**: Consistent Tailwind spacing - primarily using units 2, 4, 6, and 8\n- Component padding: p-4, p-6\n- Section margins: m-6, m-8\n- Element gaps: gap-4, gap-6\n\n## Component Library\n\n### Navigation\n- Clean header with app logo, navigation links, and user account dropdown\n- Sidebar navigation for admin panel with clear section divisions\n- Breadcrumbs for deep navigation states\n\n### Forms\n- Material-style input fields with floating labels\n- Clear validation states with inline error messages\n- Consistent button styling with primary/secondary variants\n- Form sections grouped with subtle borders\n\n### Data Displays\n- Card-based layout for sweet inventory items\n- Clean data tables for admin inventory management\n- Search and filter controls prominently placed\n- Loading states and empty states for all data views\n\n### Sweet Inventory Cards\n- Product image placeholder (150x150px)\n- Sweet name, price, and stock quantity clearly displayed\n- Purchase button with disabled state for out-of-stock items\n- Admin actions (edit/delete) visible only to admin users\n\n### Admin Interface\n- Tabbed interface for different admin functions\n- Modal dialogs for add/edit sweet forms\n- Confirmation dialogs for destructive actions\n- Quick stats dashboard showing inventory overview\n\n### Overlays\n- Modal dialogs for forms and confirmations\n- Toast notifications for success/error feedback\n- Loading overlays for async operations\n\n## Images\nNo large hero images needed for this utility-focused application. Product placeholder images (150x150px) for each sweet item in a clean, consistent style. Consider using a subtle pattern or solid color backgrounds for missing product images.\n\n## Key Principles\n- **Clarity First**: Every interface element should have a clear purpose\n- **Consistent Spacing**: Maintain rhythm with the 4-unit spacing system\n- **Accessible Contrast**: Ensure all text meets WCAG AA standards\n- **Progressive Disclosure**: Show relevant actions based on user role\n- **Efficient Workflows**: Minimize clicks for common tasks like purchasing and inventory management","size_bytes":2954},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Roboto\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4054},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport CartModal from \"@/components/CartModal\";\nimport ProductDetailModal from \"@/components/ProductDetailModal\";\nimport Header from \"@/components/Header\";\nimport AuthPage from \"@/pages/AuthPage\";\nimport DashboardPage from \"@/pages/DashboardPage\";\nimport AdminPage from \"@/pages/AdminPage\";\nimport NotFound from \"@/pages/not-found\";\n\n// Mock data - todo: remove mock functionality\nimport gummyBearsImage from '@assets/generated_images/Colorful_gummy_bears_jar_58f2544b.png';\nimport chocolateImage from '@assets/generated_images/Chocolate_truffles_arrangement_590e3205.png';\nimport lollipopsImage from '@assets/generated_images/Colorful_spiral_lollipops_67c94b38.png';\nimport jellyBeansImage from '@assets/generated_images/Gourmet_jelly_beans_container_9cc6917c.png';\n\ninterface Sweet {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n}\n\n// todo: remove mock functionality - mock sweets data\nconst initialSweets: Sweet[] = [\n  {\n    id: \"1\",\n    name: \"Rainbow Gummy Bears\",\n    price: 8.99,\n    image: gummyBearsImage,\n    category: \"Gummies\",\n    quantity: 15,\n    rating: 4.8,\n    description: \"Delicious assorted fruit-flavored gummy bears in a convenient jar\"\n  },\n  {\n    id: \"2\", \n    name: \"Chocolate Truffles\",\n    price: 24.99,\n    image: chocolateImage,\n    category: \"Chocolate\",\n    quantity: 8,\n    rating: 4.9,\n    description: \"Premium handcrafted chocolate truffles with rich cocoa powder\"\n  },\n  {\n    id: \"3\",\n    name: \"Spiral Lollipops\",\n    price: 12.50,\n    image: lollipopsImage,\n    category: \"Hard Candy\",\n    quantity: 0,\n    rating: 4.6,\n    description: \"Colorful spiral lollipops in assorted fruit flavors\"\n  },\n  {\n    id: \"4\",\n    name: \"Gourmet Jelly Beans\",\n    price: 15.99,\n    image: jellyBeansImage,\n    category: \"Jelly Beans\",\n    quantity: 3,\n    rating: 4.7,\n    description: \"Premium gourmet jelly beans with authentic fruit flavors\"\n  },\n  {\n    id: \"5\",\n    name: \"Caramel Fudge\",\n    price: 18.99,\n    image: chocolateImage,\n    category: \"Fudge\",\n    quantity: 12,\n    rating: 4.8,\n    description: \"Rich and creamy caramel fudge made with real butter\"\n  },\n  {\n    id: \"6\",\n    name: \"Marshmallow Clouds\",\n    price: 6.99,\n    image: gummyBearsImage,\n    category: \"Marshmallows\",\n    quantity: 20,\n    rating: 4.5,\n    description: \"Fluffy vanilla marshmallows perfect for s'mores\"\n  }\n];\n\ninterface CartItem {\n  sweet: Sweet;\n  quantity: number;\n}\n\nfunction AppContent() {\n  const [, setLocation] = useLocation();\n  const { actualTheme, setTheme } = useTheme();\n  const { toast } = useToast();\n\n  // todo: remove mock functionality - App state\n  const [user, setUser] = useState<{ username: string; isAdmin: boolean } | null>(null);\n  const [sweets, setSweets] = useState<Sweet[]>(initialSweets);\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [favoriteItems, setFavoriteItems] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [selectedSweet, setSelectedSweet] = useState<Sweet | null>(null);\n  const [isProductDetailOpen, setIsProductDetailOpen] = useState(false);\n\n  // todo: remove mock functionality - Authentication handlers\n  const handleLogin = (username: string, password: string) => {\n    console.log('Login attempt:', username, password);\n    \n    // Mock authentication - in real app, this would call the API\n    if (username && password) {\n      const isAdmin = username.toLowerCase().includes('admin');\n      setUser({ username, isAdmin });\n      setLocation('/');\n      toast({\n        title: \"Welcome!\",\n        description: `Successfully logged in as ${username}`,\n      });\n    } else {\n      toast({\n        title: \"Login Failed\",\n        description: \"Please enter valid credentials\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRegister = (username: string, password: string, confirmPassword: string) => {\n    console.log('Register attempt:', username, password, confirmPassword);\n    \n    // Mock registration validation\n    if (!username || !password) {\n      toast({\n        title: \"Registration Failed\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (password !== confirmPassword) {\n      toast({\n        title: \"Registration Failed\", \n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Mock successful registration\n    const isAdmin = username.toLowerCase().includes('admin');\n    setUser({ username, isAdmin });\n    setLocation('/');\n    toast({\n      title: \"Account Created!\",\n      description: `Welcome to Sweet Shop, ${username}!`,\n    });\n  };\n\n  const handleLogout = () => {\n    setUser(null);\n    setCartItems([]);\n    setFavoriteItems([]);\n    setLocation('/auth');\n    toast({\n      title: \"Logged Out\",\n      description: \"Come back soon!\",\n    });\n  };\n\n  // todo: remove mock functionality - Cart management handlers\n  const handleAddToCart = (sweetId: string, quantity: number = 1) => {\n    const sweet = sweets.find(s => s.id === sweetId);\n    if (!sweet || sweet.quantity === 0) {\n      toast({\n        title: \"Purchase Failed\",\n        description: \"This item is out of stock\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const existingItem = cartItems.find(item => item.sweet.id === sweetId);\n    if (existingItem) {\n      const newQuantity = existingItem.quantity + quantity;\n      if (newQuantity <= sweet.quantity) {\n        setCartItems(prev => \n          prev.map(item => \n            item.sweet.id === sweetId \n              ? { ...item, quantity: newQuantity }\n              : item\n          )\n        );\n        toast({\n          title: \"Updated Cart\",\n          description: `${sweet.name} quantity updated in cart`,\n        });\n      } else {\n        toast({\n          title: \"Insufficient Stock\",\n          description: `Only ${sweet.quantity} items available`,\n          variant: \"destructive\",\n        });\n      }\n    } else {\n      if (quantity <= sweet.quantity) {\n        setCartItems(prev => [...prev, { sweet, quantity }]);\n        toast({\n          title: \"Added to Cart\",\n          description: `${sweet.name} added to your cart`,\n        });\n      } else {\n        toast({\n          title: \"Insufficient Stock\",\n          description: `Only ${sweet.quantity} items available`,\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleUpdateCartQuantity = (sweetId: string, quantity: number) => {\n    if (quantity <= 0) {\n      handleRemoveFromCart(sweetId);\n      return;\n    }\n\n    const sweet = sweets.find(s => s.id === sweetId);\n    if (sweet && quantity <= sweet.quantity) {\n      setCartItems(prev => \n        prev.map(item => \n          item.sweet.id === sweetId \n            ? { ...item, quantity }\n            : item\n        )\n      );\n    } else {\n      toast({\n        title: \"Insufficient Stock\",\n        description: `Only ${sweet?.quantity || 0} items available`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveFromCart = (sweetId: string) => {\n    const item = cartItems.find(item => item.sweet.id === sweetId);\n    setCartItems(prev => prev.filter(item => item.sweet.id !== sweetId));\n    if (item) {\n      toast({\n        title: \"Removed from Cart\",\n        description: `${item.sweet.name} removed from cart`,\n      });\n    }\n  };\n\n  const handleClearCart = () => {\n    setCartItems([]);\n    toast({\n      title: \"Cart Cleared\",\n      description: \"All items removed from cart\",\n    });\n  };\n\n  const handleCheckout = () => {\n    const total = cartItems.reduce((sum, item) => sum + (item.sweet.price * item.quantity), 0);\n    toast({\n      title: \"Checkout Successful!\",\n      description: `Order total: $${(total * 1.08).toFixed(2)} (including tax)`,\n    });\n    setCartItems([]);\n    setIsCartOpen(false);\n  };\n\n  // Legacy purchase handler for compatibility\n  const handlePurchase = (id: string) => {\n    handleAddToCart(id, 1);\n  };\n\n  const handleViewDetails = (id: string) => {\n    const sweet = sweets.find(s => s.id === id);\n    if (sweet) {\n      setSelectedSweet(sweet);\n      setIsProductDetailOpen(true);\n    }\n  };\n\n  const handleToggleFavorite = (id: string) => {\n    const sweet = sweets.find(s => s.id === id);\n    if (favoriteItems.includes(id)) {\n      setFavoriteItems(prev => prev.filter(fav => fav !== id));\n      toast({\n        title: \"Removed from Favorites\",\n        description: `${sweet?.name} removed from favorites`,\n      });\n    } else {\n      setFavoriteItems(prev => [...prev, id]);\n      toast({\n        title: \"Added to Favorites\",\n        description: `${sweet?.name} added to favorites`,\n      });\n    }\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    console.log('Search for:', query);\n  };\n\n  const handleCartClick = () => {\n    setIsCartOpen(true);\n  };\n\n  const handleProfileClick = () => {\n    console.log('Profile clicked');\n    toast({\n      title: \"Profile\",\n      description: \"Profile management coming soon!\",\n    });\n  };\n\n  // todo: remove mock functionality - Admin handlers\n  const handleAddSweet = (newSweet: Omit<Sweet, 'id'>) => {\n    const id = Date.now().toString();\n    const sweet = { ...newSweet, id };\n    setSweets(prev => [...prev, sweet]);\n    console.log('Added sweet:', sweet);\n    toast({\n      title: \"Sweet Added\",\n      description: `${newSweet.name} has been added to the inventory`,\n    });\n  };\n\n  const handleEditSweet = (id: string, updates: Partial<Sweet>) => {\n    setSweets(prev => prev.map(sweet => \n      sweet.id === id ? { ...sweet, ...updates } : sweet\n    ));\n    console.log('Edited sweet:', id, updates);\n    toast({\n      title: \"Sweet Updated\",\n      description: \"Product details have been updated\",\n    });\n  };\n\n  const handleDeleteSweet = (id: string) => {\n    const sweet = sweets.find(s => s.id === id);\n    setSweets(prev => prev.filter(sweet => sweet.id !== id));\n    // Remove from cart and favorites if deleted\n    setCartItems(prev => prev.filter(item => item.sweet.id !== id));\n    setFavoriteItems(prev => prev.filter(item => item !== id));\n    console.log('Deleted sweet:', id);\n    toast({\n      title: \"Sweet Deleted\",\n      description: `${sweet?.name} has been removed from inventory`,\n    });\n  };\n\n  // Filter sweets based on search\n  const filteredSweets = searchQuery \n    ? sweets.filter(sweet => \n        sweet.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        sweet.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        sweet.category.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    : sweets;\n\n  // Sidebar style configuration  \n  const sidebarStyle = {\n    \"--sidebar-width\": \"18rem\",\n    \"--sidebar-width-icon\": \"3.5rem\",\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"min-h-screen\">\n          <Switch>\n            <Route path=\"/auth\">\n              <AuthPage onLogin={handleLogin} onRegister={handleRegister} />\n            </Route>\n            <Route path=\"/\">\n              <AuthPage onLogin={handleLogin} onRegister={handleRegister} />\n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar\n          user={user}\n          cartItemCount={cartItems.length}\n          favoriteItemCount={favoriteItems.length}\n          onLogout={handleLogout}\n          onCartClick={handleCartClick}\n          onShowFavorites={handleShowFavorites}\n        />\n        \n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-2 sm:p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n            <div className=\"flex items-center gap-2 sm:gap-4\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <h1 className=\"text-base sm:text-lg font-semibold hidden sm:block\">Sweet Shop Management</h1>\n              <h1 className=\"text-sm font-semibold sm:hidden\">Sweet Shop</h1>\n            </div>\n            \n            <div className=\"flex items-center gap-1 sm:gap-2\">\n              <Header\n                user={user}\n                cartItemCount={cartItems.length}\n                onSearch={handleSearch}\n                onCartClick={handleCartClick}\n                onProfileClick={handleProfileClick}\n                onLogout={handleLogout}\n                onToggleTheme={() => setTheme(actualTheme === 'dark' ? 'light' : 'dark')}\n                isDarkMode={actualTheme === 'dark'}\n              />\n            </div>\n          </header>\n\n          <main className=\"flex-1 overflow-hidden\">\n            <Switch>\n              <Route path=\"/admin\">\n                {user.isAdmin ? (\n                  <AdminPage\n                    sweets={sweets}\n                    onAddSweet={handleAddSweet}\n                    onEditSweet={handleEditSweet}\n                    onDeleteSweet={handleDeleteSweet}\n                  />\n                ) : (\n                  <div className=\"container mx-auto p-4 text-center py-16\">\n                    <h1 className=\"text-2xl font-bold mb-4\">Access Denied</h1>\n                    <p className=\"text-muted-foreground\">You need admin privileges to access this page.</p>\n                  </div>\n                )}\n              </Route>\n\n              <Route path=\"/\">\n                <DashboardPage\n                  user={user}\n                  sweets={filteredSweets}\n                  cartItems={cartItems.map(item => item.sweet.id)}\n                  favoriteItems={favoriteItems}\n                  onPurchase={handlePurchase}\n                  onViewDetails={handleViewDetails}\n                  onToggleFavorite={handleToggleFavorite}\n                />\n              </Route>\n\n              <Route component={NotFound} />\n            </Switch>\n          </main>\n        </div>\n        \n        {/* Cart Modal */}\n        <CartModal\n          isOpen={isCartOpen}\n          onClose={() => setIsCartOpen(false)}\n          cartItems={cartItems}\n          onUpdateQuantity={handleUpdateCartQuantity}\n          onRemoveItem={handleRemoveFromCart}\n          onCheckout={handleCheckout}\n          onClearCart={handleClearCart}\n        />\n        \n        {/* Product Detail Modal */}\n        <ProductDetailModal\n          sweet={selectedSweet}\n          isOpen={isProductDetailOpen}\n          onClose={() => {\n            setIsProductDetailOpen(false);\n            setSelectedSweet(null);\n          }}\n          onAddToCart={handleAddToCart}\n          onToggleFavorite={handleToggleFavorite}\n          isFavorite={selectedSweet ? favoriteItems.includes(selectedSweet.id) : false}\n        />\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"sweet-shop-ui-theme\">\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":15969},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 12%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 219 69% 56%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 219 20% 88%;\n\n  --sidebar-accent-foreground: 0 0% 12%;\n\n  --sidebar-ring: 219 69% 56%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 12%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 219 69% 56%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 90%;\n\n  --secondary-foreground: 0 0% 12%;\n\n  --muted: 0 2% 88%;\n\n  --muted-foreground: 0 0% 35%;\n\n  --accent: 219 15% 90%;\n\n  --accent-foreground: 0 0% 12%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 82%;\n  --ring: 219 69% 56%;\n  --chart-1: 142 76% 36%;\n  --chart-2: 219 69% 56%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 271 81% 56%;\n  --chart-5: 0 84% 60%;\n\n  --font-sans: Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 1px 2px -1px hsl(0 0% 0% / 0.02);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 1px 2px -1px hsl(0 0% 0% / 0.02);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.06), 0px 2px 4px -1px hsl(0 0% 0% / 0.04);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.08), 0px 4px 6px -1px hsl(0 0% 0% / 0.06);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.10), 0px 8px 10px -1px hsl(0 0% 0% / 0.08);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.12);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 0 0% 88%;\n\n  --border: 222 40% 20%;\n\n  --card: 222 45% 14%;\n\n  --card-foreground: 0 0% 88%;\n\n  --card-border: 222 42% 18%;\n\n  --sidebar: 222 44% 16%;\n\n  --sidebar-foreground: 0 0% 88%;\n\n  --sidebar-border: 222 41% 20%;\n\n  --sidebar-primary: 219 69% 65%;\n\n  --sidebar-primary-foreground: 0 0% 12%;\n\n  --sidebar-accent: 222 35% 22%;\n\n  --sidebar-accent-foreground: 0 0% 88%;\n\n  --sidebar-ring: 219 69% 65%;\n\n  --popover: 222 43% 18%;\n\n  --popover-foreground: 0 0% 88%;\n\n  --popover-border: 222 40% 22%;\n\n  --primary: 219 69% 56%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 222 40% 24%;\n\n  --secondary-foreground: 0 0% 88%;\n\n  --muted: 222 38% 20%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 222 30% 22%;\n\n  --accent-foreground: 0 0% 88%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 222 35% 28%;\n  --ring: 219 69% 65%;\n  --chart-1: 142 76% 56%;\n  --chart-2: 219 69% 65%;\n  --chart-3: 38 92% 60%;\n  --chart-4: 271 81% 66%;\n  --chart-5: 0 84% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.10);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.15);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.15);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 4px 6px -1px hsl(0 0% 0% / 0.20);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.35), 0px 8px 10px -1px hsl(0 0% 0% / 0.25);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.40);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9667},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Package, \n  DollarSign, \n  TrendingUp, \n  AlertTriangle,\n  Eye\n} from \"lucide-react\";\n\ninterface Sweet {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n}\n\ninterface AdminPanelProps {\n  sweets: Sweet[];\n  onAddSweet: (sweet: Omit<Sweet, 'id'>) => void;\n  onEditSweet: (id: string, sweet: Partial<Sweet>) => void;\n  onDeleteSweet: (id: string) => void;\n}\n\nexport default function AdminPanel({ sweets, onAddSweet, onEditSweet, onDeleteSweet }: AdminPanelProps) {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingSweet, setEditingSweet] = useState<Sweet | null>(null);\n  const [newSweet, setNewSweet] = useState({\n    name: \"\",\n    price: 0,\n    image: \"\",\n    category: \"\",\n    quantity: 0,\n    description: \"\"\n  });\n\n  const categories = [\"Gummies\", \"Chocolate\", \"Hard Candy\", \"Jelly Beans\", \"Fudge\", \"Marshmallows\"];\n  \n  const totalProducts = sweets.length;\n  const totalValue = sweets.reduce((sum, sweet) => sum + (sweet.price * sweet.quantity), 0);\n  const outOfStock = sweets.filter(sweet => sweet.quantity === 0).length;\n  const lowStock = sweets.filter(sweet => sweet.quantity > 0 && sweet.quantity <= 5).length;\n\n  const handleAddSweet = () => {\n    onAddSweet(newSweet);\n    setNewSweet({ name: \"\", price: 0, image: \"\", category: \"\", quantity: 0, description: \"\" });\n    setIsAddDialogOpen(false);\n  };\n\n  const handleEditSweet = () => {\n    if (editingSweet) {\n      onEditSweet(editingSweet.id, editingSweet);\n      setEditingSweet(null);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-admin-title\">Admin Panel</h1>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"gap-2\" data-testid=\"button-add-sweet\">\n              <Plus className=\"w-4 h-4\" />\n              Add Sweet\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Sweet</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Name</Label>\n                <Input\n                  id=\"name\"\n                  value={newSweet.name}\n                  onChange={(e) => setNewSweet(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Sweet name\"\n                  data-testid=\"input-add-name\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"price\">Price ($)</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={newSweet.price}\n                    onChange={(e) => setNewSweet(prev => ({ ...prev, price: parseFloat(e.target.value) || 0 }))}\n                    data-testid=\"input-add-price\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"quantity\">Quantity</Label>\n                  <Input\n                    id=\"quantity\"\n                    type=\"number\"\n                    value={newSweet.quantity}\n                    onChange={(e) => setNewSweet(prev => ({ ...prev, quantity: parseInt(e.target.value) || 0 }))}\n                    data-testid=\"input-add-quantity\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category</Label>\n                <Select value={newSweet.category} onValueChange={(value) => setNewSweet(prev => ({ ...prev, category: value }))}>\n                  <SelectTrigger data-testid=\"select-add-category\">\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map(category => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"image\">Image URL</Label>\n                <Input\n                  id=\"image\"\n                  value={newSweet.image}\n                  onChange={(e) => setNewSweet(prev => ({ ...prev, image: e.target.value }))}\n                  placeholder=\"https://...\"\n                  data-testid=\"input-add-image\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={newSweet.description}\n                  onChange={(e) => setNewSweet(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Product description...\"\n                  data-testid=\"textarea-add-description\"\n                />\n              </div>\n\n              <Button onClick={handleAddSweet} className=\"w-full\" data-testid=\"button-save-sweet\">\n                Add Sweet\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList data-testid=\"tabs-admin\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"inventory\">Inventory</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          {/* Statistics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Products</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-total-products\">{totalProducts}</p>\n                  </div>\n                  <Package className=\"w-8 h-8 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Inventory Value</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-inventory-value\">${totalValue.toFixed(2)}</p>\n                  </div>\n                  <DollarSign className=\"w-8 h-8 text-green-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Out of Stock</p>\n                    <p className=\"text-2xl font-bold text-destructive\" data-testid=\"stat-out-of-stock\">{outOfStock}</p>\n                  </div>\n                  <AlertTriangle className=\"w-8 h-8 text-destructive\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Low Stock</p>\n                    <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-low-stock\">{lowStock}</p>\n                  </div>\n                  <TrendingUp className=\"w-8 h-8 text-yellow-600\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Items */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Items</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {sweets.slice(0, 5).map((sweet) => (\n                  <div key={sweet.id} className=\"flex items-center gap-4 p-4 border rounded-md\">\n                    <div className=\"w-12 h-12 bg-muted rounded-md flex items-center justify-center\">\n                      {sweet.image ? (\n                        <img src={sweet.image} alt={sweet.name} className=\"w-full h-full object-cover rounded-md\" />\n                      ) : (\n                        <Package className=\"w-6 h-6 text-muted-foreground\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\">{sweet.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{sweet.category}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">${sweet.price.toFixed(2)}</p>\n                      <Badge variant={sweet.quantity === 0 ? \"destructive\" : sweet.quantity <= 5 ? \"secondary\" : \"default\"}>\n                        {sweet.quantity} in stock\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"inventory\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Inventory Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Product</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Price</TableHead>\n                    <TableHead>Stock</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sweets.map((sweet) => (\n                    <TableRow key={sweet.id}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-muted rounded-md flex items-center justify-center\">\n                            {sweet.image ? (\n                              <img src={sweet.image} alt={sweet.name} className=\"w-full h-full object-cover rounded-md\" />\n                            ) : (\n                              <Package className=\"w-5 h-5 text-muted-foreground\" />\n                            )}\n                          </div>\n                          <span className=\"font-medium\">{sweet.name}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>{sweet.category}</TableCell>\n                      <TableCell>${sweet.price.toFixed(2)}</TableCell>\n                      <TableCell>{sweet.quantity}</TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={sweet.quantity === 0 ? \"destructive\" : sweet.quantity <= 5 ? \"secondary\" : \"default\"}\n                          data-testid={`status-${sweet.id}`}\n                        >\n                          {sweet.quantity === 0 ? \"Out of Stock\" : sweet.quantity <= 5 ? \"Low Stock\" : \"In Stock\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button size=\"icon\" variant=\"ghost\" data-testid={`button-view-${sweet.id}`}>\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            size=\"icon\" \n                            variant=\"ghost\" \n                            onClick={() => setEditingSweet(sweet)}\n                            data-testid={`button-edit-${sweet.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            size=\"icon\" \n                            variant=\"ghost\"\n                            onClick={() => onDeleteSweet(sweet.id)}\n                            data-testid={`button-delete-${sweet.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Analytics Dashboard</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-16\">\n                <TrendingUp className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">Analytics Coming Soon</h3>\n                <p className=\"text-muted-foreground\">\n                  Detailed analytics and reporting features will be available here.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingSweet} onOpenChange={() => setEditingSweet(null)}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Sweet</DialogTitle>\n          </DialogHeader>\n          {editingSweet && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-name\">Name</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={editingSweet.name}\n                  onChange={(e) => setEditingSweet(prev => prev ? { ...prev, name: e.target.value } : null)}\n                  data-testid=\"input-edit-name\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-price\">Price ($)</Label>\n                  <Input\n                    id=\"edit-price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={editingSweet.price}\n                    onChange={(e) => setEditingSweet(prev => prev ? { ...prev, price: parseFloat(e.target.value) || 0 } : null)}\n                    data-testid=\"input-edit-price\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-quantity\">Quantity</Label>\n                  <Input\n                    id=\"edit-quantity\"\n                    type=\"number\"\n                    value={editingSweet.quantity}\n                    onChange={(e) => setEditingSweet(prev => prev ? { ...prev, quantity: parseInt(e.target.value) || 0 } : null)}\n                    data-testid=\"input-edit-quantity\"\n                  />\n                </div>\n              </div>\n\n              <Button onClick={handleEditSweet} className=\"w-full\" data-testid=\"button-save-edit\">\n                Save Changes\n              </Button>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16688},"client/src/components/AppSidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Home,\n  Package,\n  ShoppingCart,\n  Heart,\n  Settings,\n  User,\n  Candy,\n  BarChart3,\n  Users,\n  LogOut\n} from \"lucide-react\";\n\ninterface AppSidebarProps {\n  user: {\n    username: string;\n    isAdmin: boolean;\n  };\n  cartItemCount: number;\n  favoriteItemCount: number;\n  onLogout: () => void;\n  onCartClick?: () => void;\n  onShowFavorites?: () => void;\n}\n\nexport function AppSidebar({ user, cartItemCount, favoriteItemCount, onLogout, onCartClick, onShowFavorites }: AppSidebarProps) {\n  const [location] = useLocation();\n\n  const customerItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/\",\n      icon: Home,\n      badge: null,\n      action: null,\n    },\n    {\n      title: \"Shopping Cart\",\n      url: null,\n      icon: ShoppingCart,\n      badge: cartItemCount > 0 ? cartItemCount : null,\n      action: onCartClick,\n    },\n    {\n      title: \"Favorites\",\n      url: null,\n      icon: Heart,\n      badge: favoriteItemCount > 0 ? favoriteItemCount : null,\n      action: onShowFavorites,\n    },\n  ];\n\n  const adminItems = [\n    {\n      title: \"Admin Dashboard\",\n      url: \"/admin\",\n      icon: BarChart3,\n      badge: null,\n      action: null,\n    },\n  ];\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\">\n      <SidebarHeader className=\"border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-2 px-4 py-3\">\n          <div className=\"w-8 h-8 bg-sidebar-primary rounded-lg flex items-center justify-center\">\n            <Candy className=\"w-5 h-5 text-sidebar-primary-foreground\" />\n          </div>\n          <div className=\"flex-1\">\n            <h2 className=\"font-semibold text-sidebar-foreground\">Sweet Shop</h2>\n            <p className=\"text-xs text-sidebar-foreground/60\">Management System</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        {/* Customer Navigation */}\n        <SidebarGroup>\n          <SidebarGroupLabel>Browse</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {customerItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  {item.url ? (\n                    <SidebarMenuButton \n                      asChild \n                      isActive={location === item.url}\n                      data-testid={`sidebar-${item.title.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <Link href={item.url}>\n                        <item.icon className=\"w-4 h-4\" />\n                        <span>{item.title}</span>\n                        {item.badge && (\n                          <Badge variant=\"secondary\" className=\"ml-auto\">\n                            {item.badge}\n                          </Badge>\n                        )}\n                      </Link>\n                    </SidebarMenuButton>\n                  ) : (\n                    <SidebarMenuButton \n                      onClick={item.action}\n                      data-testid={`sidebar-${item.title.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                      {item.badge && (\n                        <Badge variant=\"secondary\" className=\"ml-auto\">\n                          {item.badge}\n                        </Badge>\n                      )}\n                    </SidebarMenuButton>\n                  )}\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* Admin Navigation - Only show if user is admin */}\n        {user.isAdmin && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Administration</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {adminItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild \n                      isActive={location === item.url}\n                      data-testid={`sidebar-${item.title.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <Link href={item.url}>\n                        <item.icon className=\"w-4 h-4\" />\n                        <span>{item.title}</span>\n                        {item.badge && (\n                          <Badge variant=\"secondary\" className=\"ml-auto\">\n                            {item.badge}\n                          </Badge>\n                        )}\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {/* Account Section */}\n        <SidebarGroup>\n          <SidebarGroupLabel>Account</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton \n                  onClick={onLogout}\n                  data-testid=\"sidebar-logout\"\n                >\n                  <LogOut className=\"w-4 h-4\" />\n                  <span>Logout</span>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t border-sidebar-border\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <div className=\"flex items-center gap-3 px-4 py-3\">\n              <Avatar className=\"w-8 h-8\">\n                <AvatarFallback className=\"text-xs\">\n                  {user.username.substring(0, 2).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium truncate\" data-testid=\"text-sidebar-username\">\n                  {user.username}\n                </p>\n                <p className=\"text-xs text-sidebar-foreground/60\">\n                  {user.isAdmin ? \"Administrator\" : \"Customer\"}\n                </p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onLogout}\n                className=\"w-8 h-8\"\n                data-testid=\"button-sidebar-logout\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":6922},"client/src/components/AuthForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Eye, EyeOff, Candy } from \"lucide-react\";\n\ninterface AuthFormProps {\n  onLogin: (username: string, password: string) => void;\n  onRegister: (username: string, password: string, confirmPassword: string) => void;\n}\n\nexport default function AuthForm({ onLogin, onRegister }: AuthFormProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({ \n    username: \"\", \n    password: \"\", \n    confirmPassword: \"\" \n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    onLogin(loginData.username, loginData.password);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    onRegister(registerData.username, registerData.password, registerData.confirmPassword);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-primary rounded-full flex items-center justify-center\">\n            <Candy className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <CardTitle className=\"text-2xl font-semibold\">\n            Sweet Shop\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Welcome to your candy management system\n          </p>\n        </CardHeader>\n\n        <CardContent>\n          <Tabs defaultValue=\"login\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"tabs-auth\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-username\">Username</Label>\n                  <Input\n                    id=\"login-username\"\n                    type=\"text\"\n                    placeholder=\"Enter your username\"\n                    value={loginData.username}\n                    onChange={(e) => setLoginData(prev => ({ ...prev, username: e.target.value }))}\n                    required\n                    data-testid=\"input-login-username\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\">Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"login-password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter your password\"\n                      value={loginData.password}\n                      onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                      data-testid=\"input-login-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"button-toggle-password\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\" data-testid=\"button-login\">\n                  Sign In\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-username\">Username</Label>\n                  <Input\n                    id=\"register-username\"\n                    type=\"text\"\n                    placeholder=\"Choose a username\"\n                    value={registerData.username}\n                    onChange={(e) => setRegisterData(prev => ({ ...prev, username: e.target.value }))}\n                    required\n                    data-testid=\"input-register-username\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-password\">Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"register-password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Create a password\"\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                      data-testid=\"input-register-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"button-toggle-register-password\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"confirm-password\"\n                      type={showConfirmPassword ? \"text\" : \"password\"}\n                      placeholder=\"Confirm your password\"\n                      value={registerData.confirmPassword}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                      required\n                      data-testid=\"input-confirm-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      data-testid=\"button-toggle-confirm-password\"\n                    >\n                      {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\" data-testid=\"button-register\">\n                  Create Account\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7588},"client/src/components/CartModal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ShoppingCart, Minus, Plus, Trash2, X } from \"lucide-react\";\n\ninterface Sweet {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n}\n\ninterface CartItem {\n  sweet: Sweet;\n  quantity: number;\n}\n\ninterface CartModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  cartItems: CartItem[];\n  onUpdateQuantity: (sweetId: string, quantity: number) => void;\n  onRemoveItem: (sweetId: string) => void;\n  onCheckout: () => void;\n  onClearCart: () => void;\n}\n\nexport default function CartModal({\n  isOpen,\n  onClose,\n  cartItems,\n  onUpdateQuantity,\n  onRemoveItem,\n  onCheckout,\n  onClearCart,\n}: CartModalProps) {\n  const subtotal = cartItems.reduce(\n    (sum, item) => sum + item.sweet.price * item.quantity,\n    0\n  );\n  const tax = subtotal * 0.08; // 8% tax\n  const total = subtotal + tax;\n\n  const handleIncrement = (sweetId: string, currentQuantity: number) => {\n    const sweet = cartItems.find(item => item.sweet.id === sweetId)?.sweet;\n    if (sweet && currentQuantity < sweet.quantity) {\n      onUpdateQuantity(sweetId, currentQuantity + 1);\n    }\n  };\n\n  const handleDecrement = (sweetId: string, currentQuantity: number) => {\n    if (currentQuantity > 1) {\n      onUpdateQuantity(sweetId, currentQuantity - 1);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] flex flex-col\" data-testid=\"modal-cart\">\n        <DialogHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            <ShoppingCart className=\"w-5 h-5\" />\n            Shopping Cart ({cartItems.length} items)\n          </DialogTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            data-testid=\"button-close-cart\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </DialogHeader>\n\n        {cartItems.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-16\">\n            <ShoppingCart className=\"w-16 h-16 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">Your cart is empty</h3>\n            <p className=\"text-muted-foreground text-center mb-4\">\n              Browse our delicious sweets and add them to your cart to get started!\n            </p>\n            <Button onClick={onClose} data-testid=\"button-continue-shopping\">\n              Continue Shopping\n            </Button>\n          </div>\n        ) : (\n          <>\n            <ScrollArea className=\"flex-1 max-h-96\">\n              <div className=\"space-y-4\">\n                {cartItems.map((item) => (\n                  <div\n                    key={item.sweet.id}\n                    className=\"flex items-center gap-4 p-4 border rounded-lg\"\n                    data-testid={`cart-item-${item.sweet.id}`}\n                  >\n                    <div className=\"w-16 h-16 rounded-md overflow-hidden bg-muted\">\n                      <img\n                        src={item.sweet.image}\n                        alt={item.sweet.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n\n                    <div className=\"flex-1 min-w-0\">\n                      <h4 className=\"font-medium truncate\" data-testid={`text-cart-item-name-${item.sweet.id}`}>\n                        {item.sweet.name}\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\">{item.sweet.category}</p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <span className=\"font-semibold\" data-testid={`text-cart-item-price-${item.sweet.id}`}>\n                          ${item.sweet.price.toFixed(2)}\n                        </span>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {item.sweet.quantity} in stock\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        onClick={() => handleDecrement(item.sweet.id, item.quantity)}\n                        disabled={item.quantity <= 1}\n                        data-testid={`button-decrease-${item.sweet.id}`}\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      \n                      <span className=\"w-8 text-center font-medium\" data-testid={`text-quantity-${item.sweet.id}`}>\n                        {item.quantity}\n                      </span>\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        onClick={() => handleIncrement(item.sweet.id, item.quantity)}\n                        disabled={item.quantity >= item.sweet.quantity}\n                        data-testid={`button-increase-${item.sweet.id}`}\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold\" data-testid={`text-item-total-${item.sweet.id}`}>\n                        ${(item.sweet.price * item.quantity).toFixed(2)}\n                      </p>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8 mt-1 text-destructive hover:text-destructive\"\n                        onClick={() => onRemoveItem(item.sweet.id)}\n                        data-testid={`button-remove-${item.sweet.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n\n            <Separator className=\"my-4\" />\n\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Subtotal:</span>\n                <span data-testid=\"text-subtotal\">${subtotal.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Tax (8%):</span>\n                <span data-testid=\"text-tax\">${tax.toFixed(2)}</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between text-lg font-semibold\">\n                <span>Total:</span>\n                <span data-testid=\"text-total\">${total.toFixed(2)}</span>\n              </div>\n            </div>\n\n            <DialogFooter className=\"flex flex-col sm:flex-row gap-2 pt-4\">\n              <Button\n                variant=\"outline\"\n                onClick={onClearCart}\n                className=\"gap-2\"\n                data-testid=\"button-clear-cart\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n                Clear Cart\n              </Button>\n              <Button\n                onClick={onCheckout}\n                className=\"gap-2 flex-1\"\n                data-testid=\"button-checkout\"\n              >\n                <ShoppingCart className=\"w-4 h-4\" />\n                Checkout (${total.toFixed(2)})\n              </Button>\n            </DialogFooter>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8026},"client/src/components/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  ShoppingCart, \n  Package, \n  Star, \n  TrendingUp, \n  Heart,\n  Filter\n} from \"lucide-react\";\nimport SweetGrid from \"./SweetGrid\";\nimport { DashboardSkeleton } from \"./LoadingStates\";\nimport { FadeIn, SlideIn, StaggerContainer, StaggerItem } from \"./PageTransition\";\n\ninterface Sweet {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n}\n\ninterface DashboardProps {\n  user: {\n    username: string;\n    isAdmin: boolean;\n  };\n  sweets: Sweet[];\n  cartItems: string[];\n  favoriteItems: string[];\n  onPurchase: (id: string) => void;\n  onViewDetails: (id: string) => void;\n  onToggleFavorite: (id: string) => void;\n  isLoading?: boolean;\n}\n\nexport default function Dashboard({ \n  user, \n  sweets, \n  cartItems, \n  favoriteItems,\n  onPurchase, \n  onViewDetails,\n  onToggleFavorite,\n  isLoading = false\n}: DashboardProps) {\n  const [showFavorites, setShowFavorites] = useState(false);\n\n  const featuredSweets = sweets.filter(sweet => sweet.rating && sweet.rating >= 4.7).slice(0, 4);\n  const newArrivals = sweets.slice(-4);\n  const displaySweets = showFavorites \n    ? sweets.filter(sweet => favoriteItems.includes(sweet.id))\n    : sweets;\n\n  const totalProducts = sweets.length;\n  const averageRating = sweets.reduce((sum, sweet) => sum + (sweet.rating || 0), 0) / sweets.length;\n  const categoriesCount = new Set(sweets.map(sweet => sweet.category)).size;\n\n  if (isLoading) {\n    return <DashboardSkeleton />;\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      {/* Welcome Section */}\n      <SlideIn direction=\"down\" className=\"bg-gradient-to-r from-primary/10 to-primary/5 rounded-lg p-6\">\n        <div className=\"max-w-2xl\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold mb-2\" data-testid=\"text-welcome\">\n            Welcome back, {user.username}! 🍭\n          </h1>\n          <p className=\"text-muted-foreground text-base sm:text-lg\">\n            Discover delicious sweets and manage your candy cravings. \n            {user.isAdmin && \" You have admin access to manage the store inventory.\"}\n          </p>\n        </div>\n      </SlideIn>\n\n      {/* Quick Stats */}\n      <StaggerContainer className=\"grid grid-cols-1 md:grid-cols-3 gap-4\" staggerDelay={0.1}>\n        <StaggerItem>\n          <Card className=\"hover-elevate transition-all duration-200\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Available Products</p>\n                  <p className=\"text-xl sm:text-2xl font-bold\" data-testid=\"stat-products\">{totalProducts}</p>\n                </div>\n                <Package className=\"w-6 h-6 sm:w-8 sm:h-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        </StaggerItem>\n\n        <StaggerItem>\n          <Card className=\"hover-elevate transition-all duration-200\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Average Rating</p>\n                  <p className=\"text-xl sm:text-2xl font-bold\" data-testid=\"stat-rating\">\n                    {averageRating.toFixed(1)} ⭐\n                  </p>\n                </div>\n                <Star className=\"w-6 h-6 sm:w-8 sm:h-8 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </StaggerItem>\n\n        <StaggerItem>\n          <Card className=\"hover-elevate transition-all duration-200\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Categories</p>\n                  <p className=\"text-xl sm:text-2xl font-bold\" data-testid=\"stat-categories\">{categoriesCount}</p>\n                </div>\n                <TrendingUp className=\"w-6 h-6 sm:w-8 sm:h-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </StaggerItem>\n      </StaggerContainer>\n\n      {/* Featured Products */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Star className=\"w-5 h-5 text-yellow-500\" />\n            Featured Products\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {featuredSweets.map((sweet) => (\n              <div key={sweet.id} className=\"group cursor-pointer\" onClick={() => onViewDetails(sweet.id)}>\n                <div className=\"aspect-square mb-3 overflow-hidden rounded-md bg-muted\">\n                  <img\n                    src={sweet.image}\n                    alt={sweet.name}\n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-200\"\n                  />\n                </div>\n                <div className=\"space-y-1\">\n                  <h4 className=\"font-medium line-clamp-1\">{sweet.name}</h4>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-lg font-semibold\">${sweet.price.toFixed(2)}</span>\n                    <Badge variant=\"secondary\">{sweet.category}</Badge>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                    <span className=\"text-sm text-muted-foreground\">{sweet.rating}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* New Arrivals */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"w-5 h-5 text-primary\" />\n            New Arrivals\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {newArrivals.map((sweet) => (\n              <div key={sweet.id} className=\"group cursor-pointer\" onClick={() => onViewDetails(sweet.id)}>\n                <div className=\"aspect-square mb-3 overflow-hidden rounded-md bg-muted relative\">\n                  <img\n                    src={sweet.image}\n                    alt={sweet.name}\n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-200\"\n                  />\n                  <Badge className=\"absolute top-2 left-2\" variant=\"secondary\">\n                    New\n                  </Badge>\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    className=\"absolute top-2 right-2 bg-background/80 hover:bg-background\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onToggleFavorite(sweet.id);\n                    }}\n                    data-testid={`button-favorite-${sweet.id}`}\n                  >\n                    <Heart \n                      className={`w-4 h-4 ${favoriteItems.includes(sweet.id) ? 'fill-red-500 text-red-500' : ''}`} \n                    />\n                  </Button>\n                </div>\n                <div className=\"space-y-1\">\n                  <h4 className=\"font-medium line-clamp-1\">{sweet.name}</h4>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-lg font-semibold\">${sweet.price.toFixed(2)}</span>\n                    <Badge variant=\"secondary\">{sweet.category}</Badge>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons */}\n      <FadeIn delay={0.6} className=\"flex flex-col sm:flex-row items-center gap-4 justify-center\">\n        <Button\n          variant={showFavorites ? \"default\" : \"outline\"}\n          onClick={() => setShowFavorites(!showFavorites)}\n          className=\"gap-2 w-full sm:w-auto\"\n          data-testid=\"button-toggle-favorites\"\n        >\n          <Heart className={`w-4 h-4 ${showFavorites ? 'fill-current' : ''}`} />\n          <span className=\"hidden sm:inline\">\n            {showFavorites ? 'Show All Products' : 'Show Favorites Only'}\n          </span>\n          <span className=\"sm:hidden\">\n            {showFavorites ? 'All Products' : 'Favorites'}\n          </span>\n        </Button>\n\n        <Button\n          variant=\"outline\"\n          className=\"gap-2 w-full sm:w-auto\"\n          data-testid=\"button-view-cart\"\n        >\n          <ShoppingCart className=\"w-4 h-4\" />\n          <span>Cart ({cartItems.length})</span>\n        </Button>\n      </FadeIn>\n\n      {/* All Products Grid */}\n      <SweetGrid\n        sweets={displaySweets}\n        onPurchase={onPurchase}\n        onViewDetails={onViewDetails}\n      />\n    </div>\n  );\n}","size_bytes":9346},"client/src/components/EnhancedSearch.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Search, \n  X, \n  Clock, \n  TrendingUp,\n  Hash,\n  Keyboard\n} from \"lucide-react\";\n\ninterface Sweet {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n}\n\ninterface EnhancedSearchProps {\n  sweets: Sweet[];\n  onSearch: (query: string) => void;\n  placeholder?: string;\n  showSuggestions?: boolean;\n  className?: string;\n}\n\nexport default function EnhancedSearch({ \n  sweets, \n  onSearch, \n  placeholder = \"Search sweets, categories, or descriptions...\",\n  showSuggestions = true,\n  className = \"\"\n}: EnhancedSearchProps) {\n  const [query, setQuery] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchHistory, setSearchHistory] = useState<string[]>([]);\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const suggestionRefs = useRef<(HTMLDivElement | null)[]>([]);\n\n  // Get search suggestions\n  const getSuggestions = () => {\n    if (!query.trim()) {\n      return {\n        products: [],\n        categories: [],\n        recent: searchHistory.slice(0, 3)\n      };\n    }\n\n    const queryLower = query.toLowerCase();\n    \n    const products = sweets\n      .filter(sweet => \n        sweet.name.toLowerCase().includes(queryLower) ||\n        sweet.description?.toLowerCase().includes(queryLower)\n      )\n      .slice(0, 5);\n\n    const categories = Array.from(new Set(\n      sweets\n        .filter(sweet => sweet.category.toLowerCase().includes(queryLower))\n        .map(sweet => sweet.category)\n    )).slice(0, 3);\n\n    const recent = searchHistory\n      .filter(term => term.toLowerCase().includes(queryLower))\n      .slice(0, 3);\n\n    return { products, categories, recent };\n  };\n\n  const suggestions = getSuggestions();\n  const allSuggestions = [\n    ...suggestions.recent.map(term => ({ type: 'recent' as const, value: term })),\n    ...suggestions.categories.map(cat => ({ type: 'category' as const, value: cat })),\n    ...suggestions.products.map(product => ({ type: 'product' as const, value: product.name, product }))\n  ];\n\n  // Handle search execution\n  const executeSearch = (searchTerm: string) => {\n    if (searchTerm.trim()) {\n      onSearch(searchTerm);\n      \n      // Add to search history\n      setSearchHistory(prev => {\n        const filtered = prev.filter(term => term !== searchTerm);\n        return [searchTerm, ...filtered].slice(0, 10);\n      });\n    } else {\n      onSearch(\"\");\n    }\n    setIsOpen(false);\n    setFocusedIndex(-1);\n  };\n\n  // Handle input change\n  const handleInputChange = (value: string) => {\n    setQuery(value);\n    setIsOpen(value.length > 0 || showSuggestions);\n    setFocusedIndex(-1);\n    \n    // Real-time search for immediate feedback\n    onSearch(value);\n  };\n\n  // Handle keyboard navigation\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!isOpen) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setFocusedIndex(prev => \n          prev < allSuggestions.length - 1 ? prev + 1 : prev\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setFocusedIndex(prev => prev > 0 ? prev - 1 : -1);\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (focusedIndex >= 0 && allSuggestions[focusedIndex]) {\n          const suggestion = allSuggestions[focusedIndex];\n          setQuery(suggestion.value);\n          executeSearch(suggestion.value);\n        } else {\n          executeSearch(query);\n        }\n        break;\n      case 'Escape':\n        setIsOpen(false);\n        setFocusedIndex(-1);\n        inputRef.current?.blur();\n        break;\n    }\n  };\n\n  // Handle suggestion click\n  const handleSuggestionClick = (suggestion: { type: string; value: string; product?: Sweet }) => {\n    setQuery(suggestion.value);\n    executeSearch(suggestion.value);\n  };\n\n  // Clear search\n  const clearSearch = () => {\n    setQuery(\"\");\n    onSearch(\"\");\n    setIsOpen(false);\n    inputRef.current?.focus();\n  };\n\n  // Clear search history\n  const clearHistory = () => {\n    setSearchHistory([]);\n  };\n\n  // Focus management\n  useEffect(() => {\n    if (focusedIndex >= 0 && suggestionRefs.current[focusedIndex]) {\n      suggestionRefs.current[focusedIndex]?.scrollIntoView({\n        block: 'nearest',\n        behavior: 'smooth'\n      });\n    }\n  }, [focusedIndex]);\n\n  // Keyboard shortcut (Ctrl/Cmd + K)\n  useEffect(() => {\n    const handleGlobalKeydown = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n        e.preventDefault();\n        inputRef.current?.focus();\n        setIsOpen(true);\n      }\n    };\n\n    document.addEventListener('keydown', handleGlobalKeydown);\n    return () => document.removeEventListener('keydown', handleGlobalKeydown);\n  }, []);\n\n  return (\n    <div className={`relative ${className}`}>\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n        <Input\n          ref={inputRef}\n          type=\"search\"\n          placeholder={placeholder}\n          value={query}\n          onChange={(e) => handleInputChange(e.target.value)}\n          onFocus={() => setIsOpen(true)}\n          onKeyDown={handleKeyDown}\n          className=\"pl-10 pr-16\"\n          data-testid=\"input-enhanced-search\"\n        />\n        \n        <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-1\">\n          {query && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-6 w-6\"\n              onClick={clearSearch}\n              data-testid=\"button-clear-search\"\n            >\n              <X className=\"w-3 h-3\" />\n            </Button>\n          )}\n          \n          <Badge variant=\"outline\" className=\"text-xs hidden sm:flex\">\n            <Keyboard className=\"w-3 h-3 mr-1\" />\n            ⌘K\n          </Badge>\n        </div>\n      </div>\n\n      {/* Search Suggestions Dropdown */}\n      {isOpen && (showSuggestions || query) && (\n        <Card className=\"absolute top-full left-0 right-0 mt-1 z-50 max-h-96 overflow-hidden\">\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"max-h-96\">\n              <div className=\"py-2\">\n                {allSuggestions.length === 0 && query ? (\n                  <div className=\"px-4 py-3 text-sm text-muted-foreground text-center\">\n                    No suggestions found for \"{query}\"\n                  </div>\n                ) : (\n                  <>\n                    {/* Recent Searches */}\n                    {suggestions.recent.length > 0 && !query && (\n                      <div>\n                        <div className=\"px-4 py-2 text-xs font-medium text-muted-foreground flex items-center justify-between\">\n                          <span className=\"flex items-center gap-2\">\n                            <Clock className=\"w-3 h-3\" />\n                            Recent Searches\n                          </span>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-auto p-1 text-xs\"\n                            onClick={clearHistory}\n                            data-testid=\"button-clear-history\"\n                          >\n                            Clear\n                          </Button>\n                        </div>\n                        {suggestions.recent.map((term, index) => (\n                          <div\n                            key={`recent-${term}`}\n                            ref={el => suggestionRefs.current[index] = el}\n                            className={`px-4 py-2 cursor-pointer hover:bg-muted flex items-center gap-2 ${\n                              focusedIndex === index ? 'bg-muted' : ''\n                            }`}\n                            onClick={() => handleSuggestionClick({ type: 'recent', value: term })}\n                            data-testid={`suggestion-recent-${index}`}\n                          >\n                            <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                            <span>{term}</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {/* Category Suggestions */}\n                    {suggestions.categories.length > 0 && (\n                      <div>\n                        <div className=\"px-4 py-2 text-xs font-medium text-muted-foreground border-t\">\n                          <span className=\"flex items-center gap-2\">\n                            <Hash className=\"w-3 h-3\" />\n                            Categories\n                          </span>\n                        </div>\n                        {suggestions.categories.map((category, index) => {\n                          const suggestionIndex = suggestions.recent.length + index;\n                          return (\n                            <div\n                              key={`category-${category}`}\n                              ref={el => suggestionRefs.current[suggestionIndex] = el}\n                              className={`px-4 py-2 cursor-pointer hover:bg-muted flex items-center gap-2 ${\n                                focusedIndex === suggestionIndex ? 'bg-muted' : ''\n                              }`}\n                              onClick={() => handleSuggestionClick({ type: 'category', value: category })}\n                              data-testid={`suggestion-category-${index}`}\n                            >\n                              <Hash className=\"w-4 h-4 text-muted-foreground\" />\n                              <span>{category}</span>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    )}\n\n                    {/* Product Suggestions */}\n                    {suggestions.products.length > 0 && (\n                      <div>\n                        <div className=\"px-4 py-2 text-xs font-medium text-muted-foreground border-t\">\n                          <span className=\"flex items-center gap-2\">\n                            <TrendingUp className=\"w-3 h-3\" />\n                            Products\n                          </span>\n                        </div>\n                        {suggestions.products.map((product, index) => {\n                          const suggestionIndex = suggestions.recent.length + suggestions.categories.length + index;\n                          return (\n                            <div\n                              key={`product-${product.id}`}\n                              ref={el => suggestionRefs.current[suggestionIndex] = el}\n                              className={`px-4 py-2 cursor-pointer hover:bg-muted flex items-center gap-3 ${\n                                focusedIndex === suggestionIndex ? 'bg-muted' : ''\n                              }`}\n                              onClick={() => handleSuggestionClick({ type: 'product', value: product.name, product })}\n                              data-testid={`suggestion-product-${index}`}\n                            >\n                              <div className=\"w-8 h-8 rounded bg-muted flex-shrink-0 overflow-hidden\">\n                                <img\n                                  src={product.image}\n                                  alt={product.name}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                              </div>\n                              <div className=\"flex-1 min-w-0\">\n                                <p className=\"text-sm font-medium truncate\">{product.name}</p>\n                                <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                                  <span>{product.category}</span>\n                                  <span>•</span>\n                                  <span>${product.price.toFixed(2)}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Click outside to close */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-40\"\n          onClick={() => setIsOpen(false)}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":12903},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Candy, \n  Search, \n  ShoppingCart, \n  User, \n  Settings, \n  LogOut,\n  Moon,\n  Sun\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface HeaderProps {\n  user?: {\n    username: string;\n    isAdmin: boolean;\n  };\n  cartItemCount?: number;\n  onSearch: (query: string) => void;\n  onCartClick: () => void;\n  onProfileClick: () => void;\n  onLogout: () => void;\n  onToggleTheme: () => void;\n  isDarkMode: boolean;\n}\n\nexport default function Header({\n  user,\n  cartItemCount = 0,\n  onSearch,\n  onCartClick,\n  onProfileClick,\n  onLogout,\n  onToggleTheme,\n  isDarkMode\n}: HeaderProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch(searchQuery);\n  };\n\n  return (\n    <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between gap-4\">\n        {/* Logo */}\n        <div className=\"flex items-center gap-2 shrink-0\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Candy className=\"w-5 h-5 text-primary-foreground\" />\n          </div>\n          <span className=\"font-semibold text-lg hidden sm:block\" data-testid=\"text-logo\">\n            Sweet Shop\n          </span>\n        </div>\n\n        {/* Enhanced Search - Only show on larger screens in header */}\n        {user && (\n          <div className=\"hidden md:block flex-1 max-w-md\">\n            <form onSubmit={handleSearch}>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search sweets...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </form>\n          </div>\n        )}\n\n        {/* Right side actions */}\n        <div className=\"flex items-center gap-2\">\n          {/* Theme toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onToggleTheme}\n            data-testid=\"button-theme-toggle\"\n          >\n            {isDarkMode ? <Sun className=\"w-4 h-4\" /> : <Moon className=\"w-4 h-4\" />}\n          </Button>\n\n          {user ? (\n            <>\n              {/* Cart */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"relative\"\n                onClick={onCartClick}\n                data-testid=\"button-cart\"\n              >\n                <ShoppingCart className=\"w-4 h-4\" />\n                {cartItemCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs flex items-center justify-center\"\n                    data-testid=\"badge-cart-count\"\n                  >\n                    {cartItemCount > 99 ? \"99+\" : cartItemCount}\n                  </Badge>\n                )}\n              </Button>\n\n              {/* User menu */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-user-menu\">\n                    <User className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuLabel className=\"font-normal\">\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-sm font-medium leading-none\" data-testid=\"text-username\">\n                        {user.username}\n                      </p>\n                      <p className=\"text-xs leading-none text-muted-foreground\">\n                        {user.isAdmin ? \"Administrator\" : \"Customer\"}\n                      </p>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={onProfileClick} data-testid=\"menu-profile\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    <span>Profile</span>\n                  </DropdownMenuItem>\n                  {user.isAdmin && (\n                    <DropdownMenuItem data-testid=\"menu-admin\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      <span>Admin Panel</span>\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={onLogout} data-testid=\"menu-logout\">\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Log out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </>\n          ) : (\n            <Button data-testid=\"button-login\">\n              Sign In\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":5538},"client/src/components/LoadingStates.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\n// Sweet Card Loading Skeleton\nexport function SweetCardSkeleton() {\n  return (\n    <Card className=\"animate-pulse\">\n      <CardContent className=\"p-4\">\n        <Skeleton className=\"aspect-square mb-4 rounded-md\" />\n        <div className=\"space-y-2\">\n          <div className=\"flex items-start justify-between gap-2\">\n            <Skeleton className=\"h-4 w-3/4\" />\n            <Skeleton className=\"h-5 w-16 rounded-full\" />\n          </div>\n          <Skeleton className=\"h-3 w-full\" />\n          <Skeleton className=\"h-3 w-2/3\" />\n          <div className=\"flex items-center gap-1\">\n            <Skeleton className=\"h-3 w-3 rounded-full\" />\n            <Skeleton className=\"h-3 w-8\" />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Skeleton className=\"h-5 w-16\" />\n            <Skeleton className=\"h-5 w-20\" />\n          </div>\n        </div>\n      </CardContent>\n      <div className=\"px-4 pb-4\">\n        <Skeleton className=\"h-9 w-full rounded-md\" />\n      </div>\n    </Card>\n  );\n}\n\n// Sweet Grid Loading Skeleton\nexport function SweetGridSkeleton({ count = 8 }: { count?: number }) {\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      {/* Filters Skeleton */}\n      <Card>\n        <CardHeader>\n          <Skeleton className=\"h-6 w-32\" />\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-2 md:col-span-2\">\n              <Skeleton className=\"h-4 w-16\" />\n              <Skeleton className=\"h-10 w-full\" />\n            </div>\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-16\" />\n              <Skeleton className=\"h-10 w-full\" />\n            </div>\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-16\" />\n              <Skeleton className=\"h-10 w-full\" />\n            </div>\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-16\" />\n              <div className=\"flex flex-wrap gap-2\">\n                <Skeleton className=\"h-6 w-20 rounded-full\" />\n                <Skeleton className=\"h-6 w-16 rounded-full\" />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Grid Skeleton */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {Array.from({ length: count }).map((_, i) => (\n          <SweetCardSkeleton key={i} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Dashboard Loading Skeleton\nexport function DashboardSkeleton() {\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      {/* Welcome Section Skeleton */}\n      <div className=\"bg-gradient-to-r from-primary/10 to-primary/5 rounded-lg p-6\">\n        <Skeleton className=\"h-8 w-80 mb-2\" />\n        <Skeleton className=\"h-5 w-96\" />\n      </div>\n\n      {/* Stats Skeleton */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {Array.from({ length: 3 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-32\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                </div>\n                <Skeleton className=\"h-8 w-8 rounded\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Featured Products Skeleton */}\n      <Card>\n        <CardHeader>\n          <Skeleton className=\"h-6 w-40\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"space-y-3\">\n                <Skeleton className=\"aspect-square rounded-md\" />\n                <div className=\"space-y-1\">\n                  <Skeleton className=\"h-4 w-full\" />\n                  <div className=\"flex items-center justify-between\">\n                    <Skeleton className=\"h-5 w-16\" />\n                    <Skeleton className=\"h-5 w-16 rounded-full\" />\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Skeleton className=\"h-3 w-3 rounded-full\" />\n                    <Skeleton className=\"h-3 w-8\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons Skeleton */}\n      <div className=\"flex items-center gap-4 justify-center\">\n        <Skeleton className=\"h-10 w-40\" />\n        <Skeleton className=\"h-10 w-32\" />\n      </div>\n\n      {/* Grid Skeleton */}\n      <SweetGridSkeleton count={6} />\n    </div>\n  );\n}\n\n// Admin Panel Loading Skeleton\nexport function AdminPanelSkeleton() {\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      {/* Header Skeleton */}\n      <div className=\"flex items-center justify-between\">\n        <Skeleton className=\"h-9 w-32\" />\n        <Skeleton className=\"h-10 w-32\" />\n      </div>\n\n      {/* Tabs Skeleton */}\n      <div className=\"space-y-4\">\n        <div className=\"flex space-x-1\">\n          <Skeleton className=\"h-10 w-24\" />\n          <Skeleton className=\"h-10 w-24\" />\n          <Skeleton className=\"h-10 w-24\" />\n        </div>\n\n        {/* Stats Cards Skeleton */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-24\" />\n                    <Skeleton className=\"h-8 w-16\" />\n                  </div>\n                  <Skeleton className=\"h-8 w-8 rounded\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Recent Items Skeleton */}\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-6 w-32\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"flex items-center gap-4 p-4 border rounded-md\">\n                  <Skeleton className=\"w-12 h-12 rounded-md\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <Skeleton className=\"h-4 w-40\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                  </div>\n                  <div className=\"text-right space-y-2\">\n                    <Skeleton className=\"h-4 w-16\" />\n                    <Skeleton className=\"h-6 w-20 rounded-full\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n// Search Loading Skeleton\nexport function SearchLoadingSkeleton() {\n  return (\n    <div className=\"py-2\">\n      <div className=\"px-4 py-2 text-xs font-medium text-muted-foreground\">\n        <Skeleton className=\"h-3 w-20\" />\n      </div>\n      {Array.from({ length: 3 }).map((_, i) => (\n        <div key={i} className=\"px-4 py-2 flex items-center gap-3\">\n          <Skeleton className=\"w-8 h-8 rounded\" />\n          <div className=\"flex-1 space-y-1\">\n            <Skeleton className=\"h-4 w-32\" />\n            <Skeleton className=\"h-3 w-20\" />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Page Loading Spinner\nexport function PageLoader() {\n  return (\n    <div className=\"flex items-center justify-center min-h-[400px]\">\n      <div className=\"flex flex-col items-center gap-4\">\n        <div className=\"relative\">\n          <div className=\"w-12 h-12 border-4 border-primary/20 border-t-primary rounded-full animate-spin\"></div>\n        </div>\n        <p className=\"text-sm text-muted-foreground animate-pulse\">Loading...</p>\n      </div>\n    </div>\n  );\n}\n\n// Button Loading State\nexport function ButtonLoader({ className = \"w-4 h-4\" }: { className?: string }) {\n  return (\n    <div className={`border-2 border-current border-t-transparent rounded-full animate-spin ${className}`} />\n  );\n}","size_bytes":8437},"client/src/components/PageTransition.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\n\ninterface PageTransitionProps {\n  children: React.ReactNode;\n}\n\nconst pageVariants = {\n  initial: {\n    opacity: 0,\n    y: 20,\n    scale: 0.98,\n  },\n  in: {\n    opacity: 1,\n    y: 0,\n    scale: 1,\n  },\n  out: {\n    opacity: 0,\n    y: -20,\n    scale: 1.02,\n  },\n};\n\nconst pageTransition = {\n  type: \"tween\",\n  ease: \"anticipate\",\n  duration: 0.3,\n};\n\nexport default function PageTransition({ children }: PageTransitionProps) {\n  const [location] = useLocation();\n\n  return (\n    <AnimatePresence mode=\"wait\" initial={false}>\n      <motion.div\n        key={location}\n        initial=\"initial\"\n        animate=\"in\"\n        exit=\"out\"\n        variants={pageVariants}\n        transition={pageTransition}\n        className=\"h-full\"\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n\n// Stagger animation for lists\nexport function StaggerContainer({ \n  children, \n  className = \"\",\n  staggerDelay = 0.1 \n}: { \n  children: React.ReactNode;\n  className?: string;\n  staggerDelay?: number;\n}) {\n  return (\n    <motion.div\n      className={className}\n      initial=\"hidden\"\n      animate=\"visible\"\n      variants={{\n        hidden: {},\n        visible: {\n          transition: {\n            staggerChildren: staggerDelay,\n          },\n        },\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n// Individual stagger item\nexport function StaggerItem({ \n  children, \n  className = \"\",\n  delay = 0 \n}: { \n  children: React.ReactNode;\n  className?: string;\n  delay?: number;\n}) {\n  return (\n    <motion.div\n      className={className}\n      variants={{\n        hidden: {\n          opacity: 0,\n          y: 20,\n        },\n        visible: {\n          opacity: 1,\n          y: 0,\n          transition: {\n            duration: 0.4,\n            ease: \"easeOut\",\n            delay,\n          },\n        },\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n// Fade in animation\nexport function FadeIn({ \n  children, \n  className = \"\",\n  delay = 0,\n  duration = 0.5 \n}: { \n  children: React.ReactNode;\n  className?: string;\n  delay?: number;\n  duration?: number;\n}) {\n  return (\n    <motion.div\n      className={className}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration, delay, ease: \"easeOut\" }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n// Scale in animation\nexport function ScaleIn({ \n  children, \n  className = \"\",\n  delay = 0 \n}: { \n  children: React.ReactNode;\n  className?: string;\n  delay?: number;\n}) {\n  return (\n    <motion.div\n      className={className}\n      initial={{ opacity: 0, scale: 0.8 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.4, delay, ease: \"easeOut\" }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n// Slide in from direction\nexport function SlideIn({ \n  children, \n  className = \"\",\n  direction = \"up\",\n  delay = 0,\n  distance = 20 \n}: { \n  children: React.ReactNode;\n  className?: string;\n  direction?: \"up\" | \"down\" | \"left\" | \"right\";\n  delay?: number;\n  distance?: number;\n}) {\n  const getInitial = () => {\n    switch (direction) {\n      case \"up\":\n        return { opacity: 0, y: distance };\n      case \"down\":\n        return { opacity: 0, y: -distance };\n      case \"left\":\n        return { opacity: 0, x: distance };\n      case \"right\":\n        return { opacity: 0, x: -distance };\n      default:\n        return { opacity: 0, y: distance };\n    }\n  };\n\n  return (\n    <motion.div\n      className={className}\n      initial={getInitial()}\n      animate={{ opacity: 1, x: 0, y: 0 }}\n      transition={{ duration: 0.4, delay, ease: \"easeOut\" }}\n    >\n      {children}\n    </motion.div>\n  );\n}","size_bytes":3727},"client/src/components/ProductDetailModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Star, \n  ShoppingCart, \n  Heart, \n  Minus, \n  Plus,\n  Package,\n  X\n} from \"lucide-react\";\n\ninterface Sweet {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n}\n\ninterface ProductDetailModalProps {\n  sweet: Sweet | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onAddToCart: (sweetId: string, quantity: number) => void;\n  onToggleFavorite: (sweetId: string) => void;\n  isFavorite: boolean;\n}\n\nexport default function ProductDetailModal({\n  sweet,\n  isOpen,\n  onClose,\n  onAddToCart,\n  onToggleFavorite,\n  isFavorite,\n}: ProductDetailModalProps) {\n  const [selectedQuantity, setSelectedQuantity] = useState(1);\n\n  if (!sweet) return null;\n\n  const isOutOfStock = sweet.quantity === 0;\n  const isLowStock = sweet.quantity > 0 && sweet.quantity <= 5;\n\n  const handleAddToCart = () => {\n    onAddToCart(sweet.id, selectedQuantity);\n    setSelectedQuantity(1);\n  };\n\n  const handleIncrement = () => {\n    if (selectedQuantity < sweet.quantity) {\n      setSelectedQuantity(prev => prev + 1);\n    }\n  };\n\n  const handleDecrement = () => {\n    if (selectedQuantity > 1) {\n      setSelectedQuantity(prev => prev - 1);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-product-detail\">\n        <DialogHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <DialogTitle className=\"text-2xl font-bold pr-8\">\n            {sweet.name}\n          </DialogTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"absolute right-4 top-4\"\n            data-testid=\"button-close-detail\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Product Image */}\n          <div className=\"space-y-4\">\n            <div className=\"aspect-square rounded-lg overflow-hidden bg-muted\">\n              <img\n                src={sweet.image}\n                alt={sweet.name}\n                className=\"w-full h-full object-cover\"\n                data-testid=\"img-product-detail\"\n              />\n            </div>\n            \n            {/* Product Stats */}\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div className=\"p-3 bg-muted rounded-lg\">\n                <Package className=\"w-5 h-5 mx-auto mb-1 text-muted-foreground\" />\n                <p className=\"text-sm font-medium\">{sweet.quantity}</p>\n                <p className=\"text-xs text-muted-foreground\">In Stock</p>\n              </div>\n              <div className=\"p-3 bg-muted rounded-lg\">\n                <Star className=\"w-5 h-5 mx-auto mb-1 text-yellow-500\" />\n                <p className=\"text-sm font-medium\">{sweet.rating || 'N/A'}</p>\n                <p className=\"text-xs text-muted-foreground\">Rating</p>\n              </div>\n              <div className=\"p-3 bg-muted rounded-lg\">\n                <ShoppingCart className=\"w-5 h-5 mx-auto mb-1 text-muted-foreground\" />\n                <p className=\"text-sm font-medium\">${sweet.price}</p>\n                <p className=\"text-xs text-muted-foreground\">Price</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Product Details */}\n          <div className=\"space-y-6\">\n            {/* Price and Category */}\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-3xl font-bold\" data-testid=\"text-detail-price\">\n                  ${sweet.price.toFixed(2)}\n                </p>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <Badge variant=\"secondary\" data-testid=\"text-detail-category\">\n                    {sweet.category}\n                  </Badge>\n                  {sweet.rating && (\n                    <div className=\"flex items-center gap-1\">\n                      <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                      <span className=\"text-sm text-muted-foreground\" data-testid=\"text-detail-rating\">\n                        {sweet.rating}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => onToggleFavorite(sweet.id)}\n                data-testid=\"button-toggle-favorite-detail\"\n              >\n                <Heart className={`w-4 h-4 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} />\n              </Button>\n            </div>\n\n            {/* Stock Status */}\n            <div>\n              {isOutOfStock ? (\n                <Badge variant=\"destructive\" className=\"text-sm\" data-testid=\"status-out-of-stock-detail\">\n                  Out of Stock\n                </Badge>\n              ) : isLowStock ? (\n                <Badge variant=\"secondary\" className=\"text-sm\" data-testid=\"status-low-stock-detail\">\n                  Only {sweet.quantity} left in stock\n                </Badge>\n              ) : (\n                <Badge variant=\"default\" className=\"text-sm\" data-testid=\"status-in-stock-detail\">\n                  {sweet.quantity} in stock\n                </Badge>\n              )}\n            </div>\n\n            {/* Description */}\n            <div>\n              <h3 className=\"font-semibold mb-2\">Description</h3>\n              <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-detail-description\">\n                {sweet.description || 'No description available for this product.'}\n              </p>\n            </div>\n\n            <Separator />\n\n            {/* Quantity Selector and Add to Cart */}\n            {!isOutOfStock && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Quantity</label>\n                  <div className=\"flex items-center gap-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={handleDecrement}\n                      disabled={selectedQuantity <= 1}\n                      data-testid=\"button-decrease-detail\"\n                    >\n                      <Minus className=\"w-4 h-4\" />\n                    </Button>\n                    \n                    <span className=\"w-12 text-center font-medium\" data-testid=\"text-selected-quantity\">\n                      {selectedQuantity}\n                    </span>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={handleIncrement}\n                      disabled={selectedQuantity >= sweet.quantity}\n                      data-testid=\"button-increase-detail\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                    \n                    <span className=\"text-sm text-muted-foreground ml-2\">\n                      of {sweet.quantity} available\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <p className=\"text-lg font-semibold\" data-testid=\"text-total-price\">\n                    Total: ${(sweet.price * selectedQuantity).toFixed(2)}\n                  </p>\n                  \n                  <Button\n                    onClick={handleAddToCart}\n                    className=\"w-full gap-2\"\n                    size=\"lg\"\n                    data-testid=\"button-add-to-cart-detail\"\n                  >\n                    <ShoppingCart className=\"w-4 h-4\" />\n                    Add {selectedQuantity} to Cart\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {/* Additional Info */}\n            <div className=\"text-xs text-muted-foreground space-y-1\">\n              <p>✓ Free shipping on orders over $25</p>\n              <p>✓ 30-day satisfaction guarantee</p>\n              <p>✓ Fresh ingredients, made daily</p>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8632},"client/src/components/SweetCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShoppingCart, Star } from \"lucide-react\";\n\ninterface SweetCardProps {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n  onPurchase: (id: string) => void;\n  onViewDetails: (id: string) => void;\n}\n\nexport default function SweetCard({\n  id,\n  name,\n  price,\n  image,\n  category,\n  quantity,\n  rating = 4.5,\n  description,\n  onPurchase,\n  onViewDetails,\n}: SweetCardProps) {\n  const isOutOfStock = quantity === 0;\n  const isLowStock = quantity > 0 && quantity <= 5;\n\n  return (\n    <Card className=\"hover-elevate transition-all duration-200 h-full flex flex-col\" data-testid={`card-sweet-${id}`}>\n      <CardContent className=\"p-3 sm:p-4 flex-1 flex flex-col\">\n        <div className=\"aspect-square mb-4 overflow-hidden rounded-md\">\n          <img\n            src={image}\n            alt={name}\n            className=\"w-full h-full object-cover cursor-pointer\"\n            onClick={() => onViewDetails(id)}\n            data-testid={`img-sweet-${id}`}\n          />\n        </div>\n        \n        <div className=\"space-y-2 flex-1 flex flex-col\">\n          <div className=\"flex items-start justify-between gap-2\">\n            <h3 \n              className=\"font-medium text-sm sm:text-base leading-tight cursor-pointer hover:text-primary line-clamp-2 flex-1\"\n              onClick={() => onViewDetails(id)}\n              data-testid={`text-sweet-name-${id}`}\n            >\n              {name}\n            </h3>\n            <Badge \n              variant=\"secondary\" \n              className=\"text-xs shrink-0\"\n              data-testid={`badge-category-${id}`}\n            >\n              {category}\n            </Badge>\n          </div>\n\n          {description && (\n            <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`text-description-${id}`}>\n              {description}\n            </p>\n          )}\n\n          <div className=\"flex items-center gap-1\">\n            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n            <span className=\"text-sm text-muted-foreground\" data-testid={`text-rating-${id}`}>\n              {rating}\n            </span>\n          </div>\n\n          <div className=\"flex items-center justify-between mt-auto\">\n            <span className=\"text-base sm:text-lg font-semibold\" data-testid={`text-price-${id}`}>\n              ${price.toFixed(2)}\n            </span>\n            \n            <div className=\"text-right\">\n              {isOutOfStock ? (\n                <Badge variant=\"destructive\" className=\"text-xs\" data-testid={`status-out-of-stock-${id}`}>\n                  Out of Stock\n                </Badge>\n              ) : isLowStock ? (\n                <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`status-low-stock-${id}`}>\n                  {quantity} left\n                </Badge>\n              ) : (\n                <span className=\"text-xs sm:text-sm text-muted-foreground\" data-testid={`text-stock-${id}`}>\n                  {quantity} in stock\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"pt-0 px-3 sm:px-4 pb-3 sm:pb-4\">\n        <Button\n          onClick={() => onPurchase(id)}\n          disabled={isOutOfStock}\n          className=\"w-full gap-2 text-sm sm:text-base\"\n          size=\"sm\"\n          data-testid={`button-purchase-${id}`}\n        >\n          <ShoppingCart className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n          <span className=\"hidden sm:inline\">{isOutOfStock ? \"Out of Stock\" : \"Add to Cart\"}</span>\n          <span className=\"sm:hidden\">{isOutOfStock ? \"Out\" : \"Add\"}</span>\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":3913},"client/src/components/SweetGrid.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport SweetCard from \"./SweetCard\";\nimport EnhancedSearch from \"./EnhancedSearch\";\nimport { SweetGridSkeleton } from \"./LoadingStates\";\nimport { StaggerContainer, StaggerItem } from \"./PageTransition\";\nimport { Filter, SortAsc, Package } from \"lucide-react\";\n\ninterface Sweet {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n}\n\ninterface SweetGridProps {\n  sweets: Sweet[];\n  onPurchase: (id: string) => void;\n  onViewDetails: (id: string) => void;\n  isLoading?: boolean;\n}\n\nexport default function SweetGrid({ sweets, onPurchase, onViewDetails, isLoading }: SweetGridProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"name\");\n\n  // Get unique categories\n  const categories = Array.from(new Set(sweets.map(sweet => sweet.category)));\n\n  // Filter and sort sweets\n  const filteredSweets = sweets\n    .filter(sweet => {\n      const matchesSearch = sweet.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                          sweet.description?.toLowerCase().includes(searchQuery.toLowerCase());\n      const matchesCategory = selectedCategory === \"all\" || sweet.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"price-low\":\n          return a.price - b.price;\n        case \"price-high\":\n          return b.price - a.price;\n        case \"rating\":\n          return (b.rating || 0) - (a.rating || 0);\n        case \"stock\":\n          return b.quantity - a.quantity;\n        default: // name\n          return a.name.localeCompare(b.name);\n      }\n    });\n\n  const outOfStockCount = sweets.filter(sweet => sweet.quantity === 0).length;\n  const lowStockCount = sweets.filter(sweet => sweet.quantity > 0 && sweet.quantity <= 5).length;\n\n  if (isLoading) {\n    return <SweetGridSkeleton />;\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"w-5 h-5\" />\n            Filters & Search\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-2 md:col-span-2\">\n              <label className=\"text-sm font-medium\">Search</label>\n              <EnhancedSearch\n                sweets={sweets}\n                onSearch={setSearchQuery}\n                placeholder=\"Search sweets, categories, descriptions...\"\n                showSuggestions={true}\n                data-testid=\"enhanced-search-grid\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Category</label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map(category => (\n                    <SelectItem key={category} value={category}>\n                      {category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Sort By</label>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger data-testid=\"select-sort\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\">Name (A-Z)</SelectItem>\n                  <SelectItem value=\"price-low\">Price (Low to High)</SelectItem>\n                  <SelectItem value=\"price-high\">Price (High to Low)</SelectItem>\n                  <SelectItem value=\"rating\">Rating</SelectItem>\n                  <SelectItem value=\"stock\">Stock Level</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Quick Stats</label>\n              <div className=\"flex flex-wrap gap-2\">\n                <Badge variant=\"secondary\" data-testid=\"badge-total-products\">\n                  <Package className=\"w-3 h-3 mr-1\" />\n                  {sweets.length} Products\n                </Badge>\n                {outOfStockCount > 0 && (\n                  <Badge variant=\"destructive\" data-testid=\"badge-out-of-stock\">\n                    {outOfStockCount} Out of Stock\n                  </Badge>\n                )}\n                {lowStockCount > 0 && (\n                  <Badge variant=\"secondary\" data-testid=\"badge-low-stock\">\n                    {lowStockCount} Low Stock\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {filteredSweets.length !== sweets.length && (\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-filter-results\">\n                Showing {filteredSweets.length} of {sweets.length} products\n              </p>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setSearchQuery(\"\");\n                  setSelectedCategory(\"all\");\n                  setSortBy(\"name\");\n                }}\n                data-testid=\"button-clear-filters\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Products Grid */}\n      {filteredSweets.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-16 text-center\">\n            <Package className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No sweets found</h3>\n            <p className=\"text-muted-foreground\">\n              Try adjusting your search terms or filters to find what you're looking for.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <StaggerContainer \n          className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" \n          data-testid=\"grid-sweets\"\n          staggerDelay={0.05}\n        >\n          {filteredSweets.map((sweet, index) => (\n            <StaggerItem key={sweet.id} delay={index * 0.02}>\n              <SweetCard\n                {...sweet}\n                onPurchase={onPurchase}\n                onViewDetails={onViewDetails}\n              />\n            </StaggerItem>\n          ))}\n        </StaggerContainer>\n      )}\n    </div>\n  );\n}","size_bytes":7340},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  actualTheme: \"dark\" | \"light\";\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n  actualTheme: \"light\",\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"sweet-shop-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  const [actualTheme, setActualTheme] = useState<\"dark\" | \"light\">(\"light\");\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    let systemTheme: \"dark\" | \"light\" = \"light\";\n\n    if (theme === \"system\") {\n      systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n        ? \"dark\"\n        : \"light\";\n    } else {\n      systemTheme = theme;\n    }\n\n    root.classList.add(systemTheme);\n    setActualTheme(systemTheme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    actualTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n}","size_bytes":1821},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminPage.tsx":{"content":"import AdminPanel from \"@/components/AdminPanel\";\n\ninterface Sweet {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n}\n\ninterface AdminPageProps {\n  sweets: Sweet[];\n  onAddSweet: (sweet: Omit<Sweet, 'id'>) => void;\n  onEditSweet: (id: string, sweet: Partial<Sweet>) => void;\n  onDeleteSweet: (id: string) => void;\n}\n\nexport default function AdminPage(props: AdminPageProps) {\n  return <AdminPanel {...props} />;\n}","size_bytes":513},"client/src/pages/AuthPage.tsx":{"content":"import AuthForm from \"@/components/AuthForm\";\n\ninterface AuthPageProps {\n  onLogin: (username: string, password: string) => void;\n  onRegister: (username: string, password: string, confirmPassword: string) => void;\n}\n\nexport default function AuthPage({ onLogin, onRegister }: AuthPageProps) {\n  return <AuthForm onLogin={onLogin} onRegister={onRegister} />;\n}","size_bytes":359},"client/src/pages/DashboardPage.tsx":{"content":"import Dashboard from \"@/components/Dashboard\";\n\ninterface Sweet {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  quantity: number;\n  rating?: number;\n  description?: string;\n}\n\ninterface DashboardPageProps {\n  user: {\n    username: string;\n    isAdmin: boolean;\n  };\n  sweets: Sweet[];\n  cartItems: string[];\n  favoriteItems: string[];\n  onPurchase: (id: string) => void;\n  onViewDetails: (id: string) => void;\n  onToggleFavorite: (id: string) => void;\n}\n\nexport default function DashboardPage(props: DashboardPageProps) {\n  return <Dashboard {...props} />;\n}","size_bytes":599},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AdminPanel.tsx":{"content":"import AdminPanel from '../AdminPanel';\nimport gummyBearsImage from '@assets/generated_images/Colorful_gummy_bears_jar_58f2544b.png';\nimport chocolateImage from '@assets/generated_images/Chocolate_truffles_arrangement_590e3205.png';\nimport lollipopsImage from '@assets/generated_images/Colorful_spiral_lollipops_67c94b38.png';\nimport jellyBeansImage from '@assets/generated_images/Gourmet_jelly_beans_container_9cc6917c.png';\n\nconst mockSweets = [\n  {\n    id: \"1\",\n    name: \"Rainbow Gummy Bears\",\n    price: 8.99,\n    image: gummyBearsImage,\n    category: \"Gummies\",\n    quantity: 15,\n    rating: 4.8,\n    description: \"Delicious assorted fruit-flavored gummy bears in a convenient jar\"\n  },\n  {\n    id: \"2\", \n    name: \"Chocolate Truffles\",\n    price: 24.99,\n    image: chocolateImage,\n    category: \"Chocolate\",\n    quantity: 8,\n    rating: 4.9,\n    description: \"Premium handcrafted chocolate truffles with rich cocoa powder\"\n  },\n  {\n    id: \"3\",\n    name: \"Spiral Lollipops\",\n    price: 12.50,\n    image: lollipopsImage,\n    category: \"Hard Candy\",\n    quantity: 0,\n    rating: 4.6,\n    description: \"Colorful spiral lollipops in assorted fruit flavors\"\n  },\n  {\n    id: \"4\",\n    name: \"Gourmet Jelly Beans\",\n    price: 15.99,\n    image: jellyBeansImage,\n    category: \"Jelly Beans\",\n    quantity: 3,\n    rating: 4.7,\n    description: \"Premium gourmet jelly beans with authentic fruit flavors\"\n  }\n];\n\nexport default function AdminPanelExample() {\n  return (\n    <AdminPanel\n      sweets={mockSweets}\n      onAddSweet={(sweet) => console.log('Add sweet:', sweet)}\n      onEditSweet={(id, sweet) => console.log('Edit sweet:', id, sweet)}\n      onDeleteSweet={(id) => console.log('Delete sweet:', id)}\n    />\n  );\n}","size_bytes":1719},"client/src/components/examples/AuthForm.tsx":{"content":"import AuthForm from '../AuthForm';\n\nexport default function AuthFormExample() {\n  return (\n    <AuthForm\n      onLogin={(username, password) => console.log('Login attempted:', username, password)}\n      onRegister={(username, password, confirmPassword) => \n        console.log('Register attempted:', username, password, confirmPassword)\n      }\n    />\n  );\n}","size_bytes":359},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from '../Dashboard';\nimport gummyBearsImage from '@assets/generated_images/Colorful_gummy_bears_jar_58f2544b.png';\nimport chocolateImage from '@assets/generated_images/Chocolate_truffles_arrangement_590e3205.png';\nimport lollipopsImage from '@assets/generated_images/Colorful_spiral_lollipops_67c94b38.png';\nimport jellyBeansImage from '@assets/generated_images/Gourmet_jelly_beans_container_9cc6917c.png';\n\nconst mockSweets = [\n  {\n    id: \"1\",\n    name: \"Rainbow Gummy Bears\",\n    price: 8.99,\n    image: gummyBearsImage,\n    category: \"Gummies\",\n    quantity: 15,\n    rating: 4.8,\n    description: \"Delicious assorted fruit-flavored gummy bears in a convenient jar\"\n  },\n  {\n    id: \"2\", \n    name: \"Chocolate Truffles\",\n    price: 24.99,\n    image: chocolateImage,\n    category: \"Chocolate\",\n    quantity: 8,\n    rating: 4.9,\n    description: \"Premium handcrafted chocolate truffles with rich cocoa powder\"\n  },\n  {\n    id: \"3\",\n    name: \"Spiral Lollipops\",\n    price: 12.50,\n    image: lollipopsImage,\n    category: \"Hard Candy\",\n    quantity: 0,\n    rating: 4.6,\n    description: \"Colorful spiral lollipops in assorted fruit flavors\"\n  },\n  {\n    id: \"4\",\n    name: \"Gourmet Jelly Beans\",\n    price: 15.99,\n    image: jellyBeansImage,\n    category: \"Jelly Beans\",\n    quantity: 3,\n    rating: 4.7,\n    description: \"Premium gourmet jelly beans with authentic fruit flavors\"\n  },\n  {\n    id: \"5\",\n    name: \"Caramel Fudge\",\n    price: 18.99,\n    image: chocolateImage,\n    category: \"Fudge\",\n    quantity: 12,\n    rating: 4.8,\n    description: \"Rich and creamy caramel fudge made with real butter\"\n  }\n];\n\nexport default function DashboardExample() {\n  return (\n    <Dashboard\n      user={{\n        username: \"sweetlover\",\n        isAdmin: false\n      }}\n      sweets={mockSweets}\n      cartItems={[\"1\", \"2\"]}\n      favoriteItems={[\"1\", \"4\"]}\n      onPurchase={(id) => console.log('Purchase:', id)}\n      onViewDetails={(id) => console.log('View details:', id)}\n      onToggleFavorite={(id) => console.log('Toggle favorite:', id)}\n    />\n  );\n}","size_bytes":2067},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\nimport { useState } from 'react';\n\nexport default function HeaderExample() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  return (\n    <Header\n      user={{\n        username: \"johndoe\",\n        isAdmin: true\n      }}\n      cartItemCount={3}\n      onSearch={(query) => console.log('Search:', query)}\n      onCartClick={() => console.log('Cart clicked')}\n      onProfileClick={() => console.log('Profile clicked')}\n      onLogout={() => console.log('Logout clicked')}\n      onToggleTheme={() => setIsDarkMode(!isDarkMode)}\n      isDarkMode={isDarkMode}\n    />\n  );\n}","size_bytes":609},"client/src/components/examples/SweetCard.tsx":{"content":"import SweetCard from '../SweetCard';\nimport gummyBearsImage from '@assets/generated_images/Colorful_gummy_bears_jar_58f2544b.png';\n\nexport default function SweetCardExample() {\n  return (\n    <div className=\"max-w-sm\">\n      <SweetCard\n        id=\"1\"\n        name=\"Rainbow Gummy Bears\"\n        price={8.99}\n        image={gummyBearsImage}\n        category=\"Gummies\"\n        quantity={15}\n        rating={4.8}\n        description=\"Delicious assorted fruit-flavored gummy bears in a convenient jar\"\n        onPurchase={(id) => console.log('Purchase triggered for:', id)}\n        onViewDetails={(id) => console.log('View details for:', id)}\n      />\n    </div>\n  );\n}","size_bytes":665},"client/src/components/examples/SweetGrid.tsx":{"content":"import SweetGrid from '../SweetGrid';\nimport gummyBearsImage from '@assets/generated_images/Colorful_gummy_bears_jar_58f2544b.png';\nimport chocolateImage from '@assets/generated_images/Chocolate_truffles_arrangement_590e3205.png';\nimport lollipopsImage from '@assets/generated_images/Colorful_spiral_lollipops_67c94b38.png';\nimport jellyBeansImage from '@assets/generated_images/Gourmet_jelly_beans_container_9cc6917c.png';\n\nconst mockSweets = [\n  {\n    id: \"1\",\n    name: \"Rainbow Gummy Bears\",\n    price: 8.99,\n    image: gummyBearsImage,\n    category: \"Gummies\",\n    quantity: 15,\n    rating: 4.8,\n    description: \"Delicious assorted fruit-flavored gummy bears in a convenient jar\"\n  },\n  {\n    id: \"2\", \n    name: \"Chocolate Truffles\",\n    price: 24.99,\n    image: chocolateImage,\n    category: \"Chocolate\",\n    quantity: 8,\n    rating: 4.9,\n    description: \"Premium handcrafted chocolate truffles with rich cocoa powder\"\n  },\n  {\n    id: \"3\",\n    name: \"Spiral Lollipops\",\n    price: 12.50,\n    image: lollipopsImage,\n    category: \"Hard Candy\",\n    quantity: 0,\n    rating: 4.6,\n    description: \"Colorful spiral lollipops in assorted fruit flavors\"\n  },\n  {\n    id: \"4\",\n    name: \"Gourmet Jelly Beans\",\n    price: 15.99,\n    image: jellyBeansImage,\n    category: \"Jelly Beans\",\n    quantity: 3,\n    rating: 4.7,\n    description: \"Premium gourmet jelly beans with authentic fruit flavors\"\n  }\n];\n\nexport default function SweetGridExample() {\n  return (\n    <SweetGrid\n      sweets={mockSweets}\n      onPurchase={(id) => console.log('Purchase:', id)}\n      onViewDetails={(id) => console.log('View details:', id)}\n      isLoading={false}\n    />\n  );\n}","size_bytes":1659},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}